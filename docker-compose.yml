services:
  app:
    build:
      context: .
    container_name: rest-server
    hostname: ${APP_HOST}
    depends_on:
      - db
    env_file: ".env"
    ports:
      - ${APP_PORT}:${APP_PORT}
    volumes:
      -  ./.env:/usr/src/app/.env  # Montar el archivo .env en el contenedor
    # En vez de este comando podriamos configurar docker-compose con healthschecks (investigar mas)
    command: ["sh", "-c",
               "echo 'Waiting for database...';
               timeout 60 sh -c 'until pg_isready -h db -p 5432; do sleep 1; done';
               exec /usr/local/bin/restaurant_system"]
    networks:
      - app-network
    # deploy:
    #   restart_policy:
    #     condition: on-failure

  db:
    image: postgres:15-alpine
    container_name: postgres-db
    hostname: ${DB_HOST}

    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}  # sets the superuser password for PostgreSQL. This env variable is necessary to use the postgres image.
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
      
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    hostname: mailhog
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT} # Web UI for MailHog
      - ${SMTP_PORT}:${SMTP_PORT} # SMTP server

  k6:
    image: grafana/k6:latest
    volumes:
      - ./testConcurrencyScripts:/scripts
    # entrypoint: ["sh", "-c", 
    #             "for script in /scripts/*.js;
    #              do k6 run $script; done"]
    entrypoint: ["k6", "run", "/scripts/reservation-load-test.js"]
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
  
volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
